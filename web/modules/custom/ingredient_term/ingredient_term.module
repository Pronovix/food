<?php

/**
 * @file
 * Contains hook for Ingredient Term module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_entity_presave().
 */
function ingredient_term_entity_presave(EntityInterface $entity): void {
  if ($entity->getEntityTypeId() === 'node' && $entity->getType() === 'article') {
    $material = $entity->get('field_ingredients')->value;
    $lines = explode(PHP_EOL, (string) $material);
    foreach ($lines as $line) {
      $trimmed_line = trim($line);
      $ingredients = explode(' ', $trimmed_line);
      $elements = end($ingredients);
      $terms = taxonomy_term_load_multiple_by_name($elements, 'ingredients_vocab');
      if ($terms) {
        $term = reset($terms);
      }
      else {
        $term = Term::create([
          'name' => $elements,
          'vid' => 'ingredients_vocab',
        ]);
        $term->save();
      }
    }
    foreach ($elements as $element) {
      $recipe_term = Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'name' => $element,
        'vid' => 'ingredients_vocab',
      ]);
      $recipe_term = reset($recipe_term);
      $recipe_term_id = $recipe_term->id();
      $entity->field_ingredient_terms[] = $recipe_term_id;
    }
  }
}
